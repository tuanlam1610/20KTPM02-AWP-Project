// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//Module
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String?
  dob  DateTime?

  email    String  @unique
  hash     String
  hashedRt String?

  roles     String[] @default([])
  studentId Student?
  teacherId Teacher?
  adminId   Admin?

  isEmailConfirm Boolean @default(false)
  isLocked       Boolean @default(false)
  isBanned       Boolean @default(false)

  comment Comment[]

  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
}

//Module
model Student {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                      User?                       @relation(fields: [userId], references: [id])
  userId                    String?                     @unique // 1:1 relation between User and Student
  name                      String
  classMember               ClassMember[]
  classInvitationForStudent ClassInvitationForStudent[]
  studentGrade              StudentGrade[]
  gradeReview               GradeReview[]
}

//Module
model Teacher {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                      User?                       @relation(fields: [userId], references: [id])
  userId                    String?                     @unique
  name                      String?
  classTeacher              ClassTeacher[]
  classInvitationForTeacher ClassInvitationForTeacher[]
  gradeReview               GradeReview[]
  classOwned                Class[]
}

//Module
model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

//Class //Module
model Class {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  description    String?
  code           String  @unique //Need to be generated
  invitationLink String  @unique

  gradeCompositions GradeComposition[]

  classOwner   Teacher? @relation(fields: [classOwnerId], references: [id])
  classOwnerId String?

  classTeacher              ClassTeacher[]
  classInvitationForTeacher ClassInvitationForTeacher[]
  classMember               ClassMember[]
  classInvitationForStudent ClassInvitationForStudent[]
  gradeReviews              GradeReview[]
}

model ClassTeacher {
  class     Class   @relation(fields: [classId], references: [id])
  classId   String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  @@id([classId, teacherId])
}

model ClassMember {
  class     Class   @relation(fields: [classId], references: [id])
  classId   String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  totalGrade Float?
  isJoined   Boolean @default(false)

  @@id([classId, studentId])
}

model ClassInvitationForTeacher {
  invitedTeacher Teacher @relation(fields: [teacherId], references: [id])
  teacherId      String
  class          Class   @relation(fields: [classId], references: [id])
  classId        String

  invitedTime DateTime @default(now())

  @@id([classId, teacherId])
}

model ClassInvitationForStudent {
  invitedStudent Student @relation(fields: [studentId], references: [id])
  studentId      String
  class          Class   @relation(fields: [classId], references: [id])
  classId        String

  invitedTime DateTime @default(now())

  @@id([classId, studentId])
}

//Grade composition //Module
model GradeComposition {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  percentage  Float
  rank        Int
  isFinalized Boolean @default(false)

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  studentGrades StudentGrade[]
}

//Module
model StudentGrade {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeComposition   GradeComposition @relation(fields: [gradeCompositionId], references: [id])
  gradeCompositionId String
  student            Student          @relation(fields: [studentId], references: [id])
  studentId          String
  grade              Int?
  gradeReview        GradeReview?

  @@unique([gradeCompositionId, studentId], name: "Unique_GradeComposition_Student")
}

//Module
model GradeReview {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status        GradeReviewStatus @default(Open)
  currentGrade  Float
  expectedGrade Float
  finalGrade    Float?

  explanation String?

  comment Comment[]

  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?
  class     Class    @relation(fields: [classId], references: [id])
  classId   String

  studentGrade   StudentGrade @relation(fields: [studentGradeId], references: [id])
  studentGradeId String       @unique
}

//Module
model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeReview   GradeReview @relation(fields: [gradeReviewId], references: [id])
  gradeReviewId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String
}

enum GradeReviewStatus {
  Open
  Accepted
  Denied
}

model Notification {
  id         String  @id @default(uuid())
  action     String
  object     String
  objectId   String
  objectType String
  content    String
  sender     User    @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   String
  isRead     Boolean @default(false)
  receiver   User    @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  receiverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Notification cho comment va otehr actions
//sender action add a comment on object grade review
//object ten hanh dong, action crud type/
//objectId is affected 
